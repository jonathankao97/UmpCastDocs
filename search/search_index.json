{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to UmpCast API Docs! About The UmpCast API was designed using the Django Rest Framework to build an umpire management service for local little leagues How to use the Docs The UmpCast API is partitioned into 4 \"apps\", each taking responsibility for a major aspect of the umpire management service Users : logic pertaining to user accounts Leagues : logic pertaining to leagues and their inherent structure. Includes league Divisions , and league umpiring Roles Games : logic pertaining to games, and applying to games. Includes game application Posts and Applications to those posts Notifications : logic pertaining to notification services provided by our app. Includes external email and text messaging notifications and internal feed notifications Each of the 4 apps have related database models and API endpoints. Detailed information on specific models within an app will be found in the respective Model Dropdown in navigation. Similarly, detailed information on specific endpoints within an app will be found in the respective Endpoint Dropdown in navigation. Lastly, there is Installation help for first-time users!","title":"Home"},{"location":"#welcome-to-umpcast-api-docs","text":"","title":"Welcome to UmpCast API Docs!"},{"location":"#about","text":"The UmpCast API was designed using the Django Rest Framework to build an umpire management service for local little leagues","title":"About"},{"location":"#how-to-use-the-docs","text":"The UmpCast API is partitioned into 4 \"apps\", each taking responsibility for a major aspect of the umpire management service Users : logic pertaining to user accounts Leagues : logic pertaining to leagues and their inherent structure. Includes league Divisions , and league umpiring Roles Games : logic pertaining to games, and applying to games. Includes game application Posts and Applications to those posts Notifications : logic pertaining to notification services provided by our app. Includes external email and text messaging notifications and internal feed notifications Each of the 4 apps have related database models and API endpoints. Detailed information on specific models within an app will be found in the respective Model Dropdown in navigation. Similarly, detailed information on specific endpoints within an app will be found in the respective Endpoint Dropdown in navigation. Lastly, there is Installation help for first-time users!","title":"How to use the Docs"},{"location":"about/","text":"Potiturque et iocosa picae Et ponit quoque Lorem markdownum tibi coniunx! Iugulati referre, ubi se crimina puella. Mea teste conceperat celer, et plura nec. Nec mecum Huius dedi videtur haec Ala pellens Liber requiemque Ut vocat Eurynomes dicenti Gente pictis exierat sceptra Felix quoque Nulla causa his manu quem Aethiopum limina fulsit amatam raptaturque vidit hiatus ad sibilat palmae hastilia rursus dotibus praescia. Seque in addidit Ditis? Habetque potuissent frigus iam illud dicere at Sticteque passa: ubi duro, Hector in ferrum carinae, coercuerat miliaque. Pedis alti accendit amor praestantior canat in hunc terra , pax Stygio paret stipite; seque pater Avernas. Omnes potuisse sumo Spumisque sui onusque figis et leti quam sine? Causa ait dum aquis et Ligurum ipsam sed, ad sustinet: et posset si diversi membra, Phoenissa , ditia. Gestum discordemque Idalien obstitimus erant damno manibus iterant, Sol accipit et dilapsa quid positis vellent, Graecia equus , cum. Culpae nulla rogari constitit spectans corona in toto deponit tegemus triplex! Remos dea nominat aquilam! character += directory(packet_compression_storage + -1, flaming); if (spam + caps_php - row / progressive_vlog_reality - file) { bit.case_bare_spool = pci; textVirtualMegabyte = ppmNetbios; command.speakersNetwork = 5; } memory(wHashtagZip, font(pixel, sink, cdMetaDesktop(version, white)), hardBar); if (1 == mipsPlugPaper) { crt_camera_export(utf + protocol_design); } titleBash.boot_applet_extension(oem); Nunc iungit Tenus micantes et rubor matertera sine sensit. Iaculo invidia hunc rerum canibus cetera arma capillis pectore longius? Dixere poena mihi hos, visus mundi sprevit ab muta, ille. Nec sacrisque medius in haerent reducto diruit ! Nec tibi inque elisa ad hospitium siderea. Est aurum populo. Ante manus rapacibus ora pone in mittere danda dies est in altorum, divis. var trojan_hard_voip = layout(wizardPasswordDns(thermistor / interface, row + gpsFull)); if (monochrome_drive) { kernel_social_windows(sdsl); push *= read + 126764; workstationSearchFirewire += ctp; } cloud_mbr += bar_worm_desktop; var record_copyright = jfsRayRipcording; Exclamant dixerat, attoniti et alto commisso hosti gratissima umero fixit ipsum ruit. Ignes indignere melioris navigat pompa, qui denique illum captantur ; venit. In hastarum malo rursusque pinetis: puer vultus solum Circes proelia tuos vox arcus Thyneius et, alipedi!","title":"Potiturque et iocosa picae"},{"location":"about/#potiturque-et-iocosa-picae","text":"","title":"Potiturque et iocosa picae"},{"location":"about/#et-ponit-quoque","text":"Lorem markdownum tibi coniunx! Iugulati referre, ubi se crimina puella. Mea teste conceperat celer, et plura nec. Nec mecum Huius dedi videtur haec Ala pellens Liber requiemque Ut vocat Eurynomes dicenti Gente pictis exierat sceptra Felix quoque Nulla causa his manu quem Aethiopum limina fulsit amatam raptaturque vidit hiatus ad sibilat palmae hastilia rursus dotibus praescia. Seque in addidit Ditis? Habetque potuissent frigus iam illud dicere at Sticteque passa: ubi duro, Hector in ferrum carinae, coercuerat miliaque. Pedis alti accendit amor praestantior canat in hunc terra , pax Stygio paret stipite; seque pater Avernas.","title":"Et ponit quoque"},{"location":"about/#omnes-potuisse-sumo","text":"Spumisque sui onusque figis et leti quam sine? Causa ait dum aquis et Ligurum ipsam sed, ad sustinet: et posset si diversi membra, Phoenissa , ditia. Gestum discordemque Idalien obstitimus erant damno manibus iterant, Sol accipit et dilapsa quid positis vellent, Graecia equus , cum. Culpae nulla rogari constitit spectans corona in toto deponit tegemus triplex! Remos dea nominat aquilam! character += directory(packet_compression_storage + -1, flaming); if (spam + caps_php - row / progressive_vlog_reality - file) { bit.case_bare_spool = pci; textVirtualMegabyte = ppmNetbios; command.speakersNetwork = 5; } memory(wHashtagZip, font(pixel, sink, cdMetaDesktop(version, white)), hardBar); if (1 == mipsPlugPaper) { crt_camera_export(utf + protocol_design); } titleBash.boot_applet_extension(oem);","title":"Omnes potuisse sumo"},{"location":"about/#nunc-iungit","text":"Tenus micantes et rubor matertera sine sensit. Iaculo invidia hunc rerum canibus cetera arma capillis pectore longius? Dixere poena mihi hos, visus mundi sprevit ab muta, ille. Nec sacrisque medius in haerent reducto diruit ! Nec tibi inque elisa ad hospitium siderea. Est aurum populo. Ante manus rapacibus ora pone in mittere danda dies est in altorum, divis. var trojan_hard_voip = layout(wizardPasswordDns(thermistor / interface, row + gpsFull)); if (monochrome_drive) { kernel_social_windows(sdsl); push *= read + 126764; workstationSearchFirewire += ctp; } cloud_mbr += bar_worm_desktop; var record_copyright = jfsRayRipcording; Exclamant dixerat, attoniti et alto commisso hosti gratissima umero fixit ipsum ruit. Ignes indignere melioris navigat pompa, qui denique illum captantur ; venit. In hastarum malo rursusque pinetis: puer vultus solum Circes proelia tuos vox arcus Thyneius et, alipedi!","title":"Nunc iungit"},{"location":"installation/","text":"Installation Goal Get a working copy of the UmpCast API source code in local production environment Clone the Project git clone https://github.com/UmpCast/UmpCastV2-Backend.git Install Dependencies python3 -m venv env/ source env/bin/activate pip3 install -r requirements.txt Configure Environment Variables UmpCast API expects the following environment variables to be defined. SECRET_KEY DEBUG ENGINE (DB Engine Type) Currently, requires a PostgreSQL backend NAME (DB Name) SOCIAL_AUTH_FACEBOOK_KEY SOCIAL_AUTH_FACEBOOK_SECRET SOCIAL_AUTH_GOOGLE_OAUTH2_KEY SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET Migrate Database/Start Server python3 manage.py migrate python3 manage.py createsuperuser python3 manage.py runserver Create Social Auth Application for Social Login Visit localhost:8000/admin and authenticate using superuser Under Django OAuth Toolkit, create application Select User (superuser created) Leave client_id/client_secret (important for social login) Select client_type: confidential Select authorization_grant_type: resource owner password-based Name: any name related to the application","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#goal","text":"Get a working copy of the UmpCast API source code in local production environment","title":"Goal"},{"location":"installation/#clone-the-project","text":"git clone https://github.com/UmpCast/UmpCastV2-Backend.git","title":"Clone the Project"},{"location":"installation/#install-dependencies","text":"python3 -m venv env/ source env/bin/activate pip3 install -r requirements.txt","title":"Install Dependencies"},{"location":"installation/#configure-environment-variables","text":"UmpCast API expects the following environment variables to be defined. SECRET_KEY DEBUG ENGINE (DB Engine Type) Currently, requires a PostgreSQL backend NAME (DB Name) SOCIAL_AUTH_FACEBOOK_KEY SOCIAL_AUTH_FACEBOOK_SECRET SOCIAL_AUTH_GOOGLE_OAUTH2_KEY SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET","title":"Configure Environment Variables"},{"location":"installation/#migrate-databasestart-server","text":"python3 manage.py migrate python3 manage.py createsuperuser python3 manage.py runserver","title":"Migrate Database/Start Server"},{"location":"installation/#create-social-auth-application-for-social-login","text":"Visit localhost:8000/admin and authenticate using superuser Under Django OAuth Toolkit, create application Select User (superuser created) Leave client_id/client_secret (important for social login) Select client_type: confidential Select authorization_grant_type: resource owner password-based Name: any name related to the application","title":"Create Social Auth Application for Social Login"},{"location":"endpoints/games/","text":"Games Application Endpoints Stay tuned...","title":"Game Endpoints"},{"location":"endpoints/games/#games-application-endpoints","text":"Stay tuned...","title":"Games Application Endpoints"},{"location":"endpoints/leagues/","text":"Leagues Application Endpoints Stay tuned...","title":"League Endpoints"},{"location":"endpoints/leagues/#leagues-application-endpoints","text":"Stay tuned...","title":"Leagues Application Endpoints"},{"location":"endpoints/notifications/","text":"Notification Application Endpoints Stay tuned...","title":"Notification Endpoints"},{"location":"endpoints/notifications/#notification-application-endpoints","text":"Stay tuned...","title":"Notification Application Endpoints"},{"location":"endpoints/users/","text":"User Application Endpoints Social Auth Login/Register After getting the social token from either facebook or google using OAuth2, exchange the social token for an access_token that is usable in our application. This endpoint is used for both first-time and returning users, as both scenarios follow the same pipeline. Permissions : Any Endpoint : http://localhost:8000/auth/convert-token POST DATA = { \"grant_type\": \"convert_token\", \"client_id\": \"<CLIENT_ID>\", \"client_secret\": \"<CLIENT_SECRET>\", \"backend\": \"<FACEBOOK/GOOGLE-OAUTH2>\", \"token\": \"<TOKEN>\" } RESPONSE DATA = { \"access_token\": \"<ACCESS_TOKEN>\", \"expires_in\": 36000, \"token_type\": \"Bearer\", \"scope\": \"read write\", \"refresh_token\": \"<REFRESH_TOKEN>\" } Login (Non-Social Auth users) Login page for returning users. Provide access_token if login_cridentials are valid Permissions : Any Endpoint : http://localhost:8000/auth/token/ POST DATA = { \"grant_type\": \"password\", \"client_id\": \"<CLIENT_ID\">, \"client_secret\": \"<CLIENT_SECRET>\", \"username\": \"<USERNAME>\", \"password\": \"<PASSWORD>\" } RESPONSE DATA = { \"access_token\": \"<ACCESS_TOKEN>\", \"expires_in\": 36000, \"token_type\": \"Bearer\", \"scope\": \"read write\", \"refresh_token\": \"<REFRESH_TOKEN>\" } Create User Create a user with minimum information. Is_configured defaults to false, other information must be provided later (using the update or partial-update endpoints) Permissions : Any Endpoint : http://localhost:8000/api/users/ POST DATA = { \"first_name\": \"<FIRST_NAME>\", \"last_name\": \"<LAST_NAME>\", \"email\": \"<EMAIL>\", \"password\": \"<PASSWORD>\" } Validation : Email Validator Password Validator Retrieve User Returns entire user profile, only if you are the user owner Permissions : User Owner Endpoint : http://localhost:8000/api/users/PK/ GET REQUEST: Authorization: \"Bearer <ACCESS_TOKEN>\" Retrieve Logged in \"Me\" User Returns the entire user profile of the account associated with the application access token provided. Permissions : Is Authenticated Endpoint : http://localhost:8000/api/users/me/ GET REQUEST: Authorization: \"Bearer <ACCESS_TOKEN>\" RESPONSE DATA = { \"pk\": <PK> \"first_name\": <FIRST_NAME> ... } Partial Update User Perform a partial update on user profile, if you are the user owner. Only fields specified in JSON PATCH request will be updated Permissions : User Owner Endpoints : http://localhost:8000/api/users/PK/ PATCH REQUEST: Authorization: \"Bearer <ACCESS_TOKEN>\" PATCH DATA = { \"email\": \"<EMAIL>\", \"password\": \"<PASSWORD>\", (Any subset of fields to update) ... } Validation : - Individual Field Validation Full Update User Essentially the same as \u201cPARTIAL Update User\u201d except you must specify all fields (including the password field) Permissions : User Owner Endpoint : http://localhost:8000/api/users/PK/ PUT REQUEST: Authorization: \"Bearer <ACCESS_TOKEN>\" PATCH DATA = { \"first_name\": \"<FIRST_NAME>\", \"last_name\": \"<LAST_NAME>\", \"email\": \"<EMAIL>\", \"password\": \"<PASSWORD>\", ... } Validation : - Individual Field Validation List Users / User Filtering Provide user filtering using query-params. Only public information is displayed Permissions : Depends on request query-params - To view all users: must be superuser - To view all users in league: must be in league Endpoint : http://localhost:8000/api/users/QUERY-PARAMS Query-Params : /?league=<LEAGUE_ID> /?account_type=<ACCOUNT_TYPE> More options coming soon... GET REQUEST: Authorization: \"Bearer <ACCESS_TOKEN>\" Example Endpoints: http://localhost:8000/api/users/ Returns a list of all users, returns validation error if not authorized as superuser http://localhost:8000/api/users/?account_type=ACCOUNT_TYPE Returns a list of all users with given account type, returns validation error if not authorized as superuser http://localhost:8000/api/users/?league=PK/ Returns all users in league, returns validation error if not member of league http://localhost:8000/api/users/?leauge=PK&account_Type=ACCOUNT_TYPE Returns all users in league and with account type, returns validation error if not member of league UserLeagueStatus Create Create a UserLeagueStatus (typically used for Umpires/Managers to apply to leagues). The user can only create a UserLeagueStatus linked to their account, otherwise a validation error will be thrown. Returns the created UserLeagueStatus Permissions : IsAuthenticated Endpoint : http://localhost:8000/api/user-league-status/ POST DATA = { \"user\": <USER_PK>, \"league\": <LEAGUE_PK>, } RESPONSE DATA = { \"pk\": <USER_LEAGUE_STATUS_PK>, \"user\": <USER_PK>, \"league\": <LEAGUE_PK>, \"date_pending\": <DEFAULT>, \"date_joined\": <DEFAULT>, \"join_status\": <DEFAULT>, \"max_casts\": <DEFAULT> } Validation : - User must be owned by current users, pk must exist - Leauge pk must exist UserLeagueStatus Retrieve Permissions : UserLeagueStatus owner Endpoint : http://localhost:8000/api/user-league-status/PK/ GET REQUEST: Authorization: \"Bearer <ACCESS_TOKEN>\" UserLeagueStatus Full/Partial Update Follows standard HTTP verbs: PUT for full update, PATCH for partial update. Note: \"full update\" requires only all \"required fields\". User and League are read_only fields, cannot be updated here. Permissions : UserLeagueStatus owner Endpoint : http://localhost:8000/api/user-league-status/PK/ PUT REQUEST = { (all required fields) } PATCH REQUEST = { (any subset of fields) } UserLeagueStatus Destroy Destroy a model instance using the HTTP verb: DELETE Permissions : UserLeagueStatus owner Endpoint : http://localhost:8000/api/user-league-status/PK/ UserLeagueStatus List / Filtering Provide UserLeagueStatus in list format and provide filtering capability Permissions : IsAuthenticated Endpoint : http://localhost:8000/api/user-league-status/ Query-Params /?user=<USER_PK'>","title":"User Endpoints"},{"location":"endpoints/users/#user-application-endpoints","text":"","title":"User Application Endpoints"},{"location":"endpoints/users/#social-auth-loginregister","text":"After getting the social token from either facebook or google using OAuth2, exchange the social token for an access_token that is usable in our application. This endpoint is used for both first-time and returning users, as both scenarios follow the same pipeline. Permissions : Any Endpoint : http://localhost:8000/auth/convert-token POST DATA = { \"grant_type\": \"convert_token\", \"client_id\": \"<CLIENT_ID>\", \"client_secret\": \"<CLIENT_SECRET>\", \"backend\": \"<FACEBOOK/GOOGLE-OAUTH2>\", \"token\": \"<TOKEN>\" } RESPONSE DATA = { \"access_token\": \"<ACCESS_TOKEN>\", \"expires_in\": 36000, \"token_type\": \"Bearer\", \"scope\": \"read write\", \"refresh_token\": \"<REFRESH_TOKEN>\" }","title":"Social Auth Login/Register"},{"location":"endpoints/users/#login-non-social-auth-users","text":"Login page for returning users. Provide access_token if login_cridentials are valid Permissions : Any Endpoint : http://localhost:8000/auth/token/ POST DATA = { \"grant_type\": \"password\", \"client_id\": \"<CLIENT_ID\">, \"client_secret\": \"<CLIENT_SECRET>\", \"username\": \"<USERNAME>\", \"password\": \"<PASSWORD>\" } RESPONSE DATA = { \"access_token\": \"<ACCESS_TOKEN>\", \"expires_in\": 36000, \"token_type\": \"Bearer\", \"scope\": \"read write\", \"refresh_token\": \"<REFRESH_TOKEN>\" }","title":"Login (Non-Social Auth users)"},{"location":"endpoints/users/#create-user","text":"Create a user with minimum information. Is_configured defaults to false, other information must be provided later (using the update or partial-update endpoints) Permissions : Any Endpoint : http://localhost:8000/api/users/ POST DATA = { \"first_name\": \"<FIRST_NAME>\", \"last_name\": \"<LAST_NAME>\", \"email\": \"<EMAIL>\", \"password\": \"<PASSWORD>\" } Validation : Email Validator Password Validator","title":"Create User"},{"location":"endpoints/users/#retrieve-user","text":"Returns entire user profile, only if you are the user owner Permissions : User Owner Endpoint : http://localhost:8000/api/users/PK/ GET REQUEST: Authorization: \"Bearer <ACCESS_TOKEN>\"","title":"Retrieve User"},{"location":"endpoints/users/#retrieve-logged-in-me-user","text":"Returns the entire user profile of the account associated with the application access token provided. Permissions : Is Authenticated Endpoint : http://localhost:8000/api/users/me/ GET REQUEST: Authorization: \"Bearer <ACCESS_TOKEN>\" RESPONSE DATA = { \"pk\": <PK> \"first_name\": <FIRST_NAME> ... }","title":"Retrieve Logged in \"Me\" User"},{"location":"endpoints/users/#partial-update-user","text":"Perform a partial update on user profile, if you are the user owner. Only fields specified in JSON PATCH request will be updated Permissions : User Owner Endpoints : http://localhost:8000/api/users/PK/ PATCH REQUEST: Authorization: \"Bearer <ACCESS_TOKEN>\" PATCH DATA = { \"email\": \"<EMAIL>\", \"password\": \"<PASSWORD>\", (Any subset of fields to update) ... } Validation : - Individual Field Validation","title":"Partial Update User"},{"location":"endpoints/users/#full-update-user","text":"Essentially the same as \u201cPARTIAL Update User\u201d except you must specify all fields (including the password field) Permissions : User Owner Endpoint : http://localhost:8000/api/users/PK/ PUT REQUEST: Authorization: \"Bearer <ACCESS_TOKEN>\" PATCH DATA = { \"first_name\": \"<FIRST_NAME>\", \"last_name\": \"<LAST_NAME>\", \"email\": \"<EMAIL>\", \"password\": \"<PASSWORD>\", ... } Validation : - Individual Field Validation","title":"Full Update User"},{"location":"endpoints/users/#list-users-user-filtering","text":"Provide user filtering using query-params. Only public information is displayed Permissions : Depends on request query-params - To view all users: must be superuser - To view all users in league: must be in league Endpoint : http://localhost:8000/api/users/QUERY-PARAMS Query-Params : /?league=<LEAGUE_ID> /?account_type=<ACCOUNT_TYPE> More options coming soon... GET REQUEST: Authorization: \"Bearer <ACCESS_TOKEN>\" Example Endpoints: http://localhost:8000/api/users/ Returns a list of all users, returns validation error if not authorized as superuser http://localhost:8000/api/users/?account_type=ACCOUNT_TYPE Returns a list of all users with given account type, returns validation error if not authorized as superuser http://localhost:8000/api/users/?league=PK/ Returns all users in league, returns validation error if not member of league http://localhost:8000/api/users/?leauge=PK&account_Type=ACCOUNT_TYPE Returns all users in league and with account type, returns validation error if not member of league","title":"List Users / User Filtering"},{"location":"endpoints/users/#userleaguestatus-create","text":"Create a UserLeagueStatus (typically used for Umpires/Managers to apply to leagues). The user can only create a UserLeagueStatus linked to their account, otherwise a validation error will be thrown. Returns the created UserLeagueStatus Permissions : IsAuthenticated Endpoint : http://localhost:8000/api/user-league-status/ POST DATA = { \"user\": <USER_PK>, \"league\": <LEAGUE_PK>, } RESPONSE DATA = { \"pk\": <USER_LEAGUE_STATUS_PK>, \"user\": <USER_PK>, \"league\": <LEAGUE_PK>, \"date_pending\": <DEFAULT>, \"date_joined\": <DEFAULT>, \"join_status\": <DEFAULT>, \"max_casts\": <DEFAULT> } Validation : - User must be owned by current users, pk must exist - Leauge pk must exist","title":"UserLeagueStatus Create"},{"location":"endpoints/users/#userleaguestatus-retrieve","text":"Permissions : UserLeagueStatus owner Endpoint : http://localhost:8000/api/user-league-status/PK/ GET REQUEST: Authorization: \"Bearer <ACCESS_TOKEN>\"","title":"UserLeagueStatus Retrieve"},{"location":"endpoints/users/#userleaguestatus-fullpartial-update","text":"Follows standard HTTP verbs: PUT for full update, PATCH for partial update. Note: \"full update\" requires only all \"required fields\". User and League are read_only fields, cannot be updated here. Permissions : UserLeagueStatus owner Endpoint : http://localhost:8000/api/user-league-status/PK/ PUT REQUEST = { (all required fields) } PATCH REQUEST = { (any subset of fields) }","title":"UserLeagueStatus Full/Partial Update"},{"location":"endpoints/users/#userleaguestatus-destroy","text":"Destroy a model instance using the HTTP verb: DELETE Permissions : UserLeagueStatus owner Endpoint : http://localhost:8000/api/user-league-status/PK/","title":"UserLeagueStatus Destroy"},{"location":"endpoints/users/#userleaguestatus-list-filtering","text":"Provide UserLeagueStatus in list format and provide filtering capability Permissions : IsAuthenticated Endpoint : http://localhost:8000/api/user-league-status/ Query-Params /?user=<USER_PK'>","title":"UserLeagueStatus List / Filtering"},{"location":"models/games/","text":"Games Model Info Stay tuned...","title":"Game Models"},{"location":"models/games/#games-model-info","text":"Stay tuned...","title":"Games Model Info"},{"location":"models/leagues/","text":"Leagues model info Stay tuned...","title":"League Models"},{"location":"models/leagues/#leagues-model-info","text":"Stay tuned...","title":"Leagues model info"},{"location":"models/notifications/","text":"Notification Model Info Stay tuned...","title":"Notification Models"},{"location":"models/notifications/#notification-model-info","text":"Stay tuned...","title":"Notification Model Info"},{"location":"models/users/","text":"Users Model Info Stay tuned...","title":"User Models"},{"location":"models/users/#users-model-info","text":"Stay tuned...","title":"Users Model Info"}]}